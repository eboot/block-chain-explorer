{"version":3,"file":"script.js","sources":["app.js","masterPage/masterPage.js","services/services.js","blockDetail/blockDetail.js","d3/d3.js","components/version/version.js","components/version/version-directive.js","components/version/interpolate-filter.js","bower_components/angular-route/angular-route.js"],"names":["angular","module","config","$routeProvider","when","templateUrl","controller","otherwise","redirectTo","directive","scope","element","attributes","addClass","restrict","transclude","filter","input","undefined","indexOfLastConsequtiveZero","i","len","length","remainder","slice","Math","min","test","myApp","masterPage","MasterPageController","$scope","BlockService","this","retryError","oldestBlock","errorMessage","previousTenFromLatest","prototype","_this","getLatestHash","then","latestHash","previousTenBlocks","hash","getBlocks","blocksArray","rawBlocks","$apply","previousTen","convertHexToDecimal","hex","parseInt","$inject","filterText","newArray","index","array","result","indexOf","template","rawBlock","blockExplorerServices","factory","$http","blockService","Promise","resolve","reject","get","response","data","error","maxBlocks","chainGetBlock","previousGet","success","block","push","getBlock","prev_block","bind","blockArray","getTransactions","numLevels","chainGetTransaction","parents","childGet","level","rawTransactions","childPromises","forEach","Object","getOwnPropertyNames","children","getChildTransactions","x","parent","concat","all","getTransaction","rawTransaction","transactionPromises","childHash","prev_out","verifyBlock","req","method","url","$window","blockDetailPage","$routeParams","self","verificationStatus","isValid","console","log","blockHash","rootHash","tx","transactions","visualisationHash","controllerAs","vm","updateHash","newHash","$watch","currentIndex","currentTransactionsFromIndex","number","currentTransactions","nextTen","remainingTransactions","d3Service","link","attrs","svg","force","nodes","links","height","width","d3","layout","select","attr","style","append","update","selectAll","remove","enter","exit","node","groupEnter","d","on","text","y","source","target","size","linkDistance","layer","charge","chargeDistance","alpha","start","dataFromTree","uid","splice","fixed","$document","$q","$rootScope","onScriptLoad","window","scriptTag","createElement","type","async","src","onreadystatechange","readyState","onload","s","getElementsByTagName","appendChild","value","version","elm","String","replace","$RouteProvider","inherit","extra","extend","pathRegExp","path","opts","insensitive","caseInsensitiveMatch","ret","originalPath","regexp","keys","_","slash","key","option","optional","star","name","RegExp","routes","route","reloadOnSearch","redirectPath","substr","params","$get","$location","$injector","$templateCache","$sce","switchRouteMatcher","m","exec","val","updateRoute","next","parseRoute","last","$route","current","$$route","equals","pathParams","forceReload","copy","$broadcast","isString","interpolate","search","locals","invoke","isDefined","isFunction","getTrustedResourceUrl","loadedTemplateUrl","cache","match","string","split","segment","segmentMatch","join","reload","$evalAsync","$on","$RouteParamsProvider","ngViewFactory","$anchorScroll","$animate","terminal","priority","$element","ctrl","$transclude","cleanupLastView","previousElement","currentScope","$destroy","currentElement","leave","$template","newScope","$new","clone","autoScrollExp","$eval","$emit","onloadExp","autoscroll","ngViewFillContentFactory","$compile","$controller","html","contents","ngRouteModule","provider"],"mappings":"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","sourcesContent":["'use strict';\n\n// Declare app level module which depends on views, and components\nangular.module('myApp', [\n  'ngRoute',\n  'myApp.masterPage',\n  'myApp.blockDetailPage',\n  'myApp.version',\n  'blockExplorerServices',\n  'd3',\n]).\nconfig(['$routeProvider', function($routeProvider) {\n  $routeProvider.when('/block/:blockHash', {\n    templateUrl: 'blockDetail/blockDetail.html',\n    controller: 'BlockDetailPageCtrl',\n  }).\n  otherwise({redirectTo: '/'});\n}]).\ndirective('greyBackground', function () {\n  return function (scope, element, attributes) {\n    element.addClass('list-box');\n  };\n}).\ndirective('layout', function () {\n return {\n    templateUrl: 'layout.html',\n    restrict: 'E',\n    transclude: true,\n  };\n})\n.filter('removeLeadingZeros', function () {\n    return function (input) {\n\n      if (input === undefined) return;\n\n      var indexOfLastConsequtiveZero = 0;\n      for (var i = 0, len = input.length; i < len; i++) {\n        if (input[i] != '0') {\n          indexOfLastConsequtiveZero = i;\n          break;\n        }\n      }\n\n      var remainder = input.length - indexOfLastConsequtiveZero;\n\n      return input.slice(indexOfLastConsequtiveZero, indexOfLastConsequtiveZero + Math.min(remainder, 6));\n    };\n  });\n\n","/// <reference path=\"../definitionFiles/angular/angular.d.ts\" />\n/// <reference path=\"../definitionFiles/es6-promise/es6-promise.d.ts\" />\n'use strict';\nvar test = 0;\nvar myApp;\n(function (myApp) {\n    var masterPage;\n    (function (masterPage) {\n        'use strict';\n        var MasterPageController = (function () {\n            function MasterPageController($scope, BlockService) {\n                this.$scope = $scope;\n                this.BlockService = BlockService;\n                this.retryError = 'Error! Could not load blocks.';\n                this.oldestBlock = '';\n                this.errorMessage = '';\n                this.previousTenFromLatest();\n            }\n            MasterPageController.prototype.previousTenFromLatest = function () {\n                var _this = this;\n                this.BlockService.getLatestHash().then(function (latestHash) {\n                    _this.errorMessage = '';\n                    _this.previousTenBlocks(latestHash);\n                }, function () {\n                    _this.previousTenBlocks('000000008d9dc510f23c2657fc4f67bea30078cc05a90eb89e84cc475c080805');\n                });\n            };\n            MasterPageController.prototype.previousTenBlocks = function (hash) {\n                var _this = this;\n                this.BlockService.getBlocks(hash, 10).then(function (blocksArray) {\n                    _this.errorMessage = '';\n                    _this.rawBlocks = blocksArray;\n                    _this.oldestBlock = _this.rawBlocks[_this.rawBlocks.length - 1].hash;\n                }, function () {\n                    _this.errorMessage = _this.retryError;\n                    _this.$scope.$apply();\n                    _this.previousTenBlocks('000000008d9dc510f23c2657fc4f67bea30078cc05a90eb89e84cc475c080805');\n                });\n            };\n            MasterPageController.prototype.previousTen = function () {\n                this.previousTenBlocks(this.oldestBlock);\n            };\n            MasterPageController.prototype.convertHexToDecimal = function (hex) {\n                return parseInt(hex, 16);\n            };\n            MasterPageController.$inject = ['$scope', 'BlockService'];\n            return MasterPageController;\n        })();\n        angular.module('myApp.masterPage', ['ngRoute', 'blockExplorerServices']).config(['$routeProvider', function ($routeProvider) {\n            $routeProvider.when('/', {\n                templateUrl: 'masterPage/masterPage.html',\n                controller: 'MasterPageController'\n            });\n        }]).controller('MasterPageController', MasterPageController).filter('blockHashFilter', function () {\n            return function (input, filterText) {\n                // return false;\n                if (!input || !filterText) {\n                    return input;\n                }\n                var newArray = input.filter(function (element, index, array) {\n                    var result = (element.hash.indexOf(filterText) > -1);\n                    return result;\n                });\n                return newArray;\n            };\n        }).directive('blockCard', function () {\n            return {\n                restrict: 'E',\n                template: '<a href=\"#/block/{{rawBlock.hash}}\"><div><div class=\"arrow-right\"></div><h1>{{ rawBlock.hash | removeLeadingZeros }}</h1><p># Transactions: {{ rawBlock.tx.length }}</p></div></a>',\n                scope: {\n                    rawBlock: \"=rawBlock\"\n                }\n            };\n        });\n        ;\n    })(masterPage = myApp.masterPage || (myApp.masterPage = {}));\n})(myApp || (myApp = {}));\n//# sourceMappingURL=masterPage.js.map","'use strict';\n\n(function() {\n  var blockExplorerServices = angular.module('blockExplorerServices', []);\n\n  blockExplorerServices.factory('BlockService', ['$http', function($http) {\n\n    var blockService = {};\n\n    /* Return the latest block hash. */\n    blockService.getLatestHash = function() {\n      return new Promise(function(resolve, reject) {\n        $http.get('/blockExplorer/q/latesthash').then(function (response) {\n          resolve(response.data);\n        },\n        function(error) {\n          reject();\n        });\n      });\n    };\n\n    /* Returns the 'maxBlocks' blocks previous to 'hash'. */\n    blockService.getBlocks = function(hash, maxBlocks) {\n\n      var blocksArray = [];\n\n      /* Recursively chains block requests until 'maxBlocks' is reached. */\n      var chainGetBlock = function(previousGet, success, error) {\n        if (blocksArray.length === maxBlocks) {\n          success(blocksArray);\n          return;\n        }\n\n        previousGet.then(\n          function(block) {\n            var rawBlock = block;\n            blocksArray.push(rawBlock);\n            chainGetBlock(blockService.getBlock(rawBlock.prev_block), success);\n          }.bind(this),\n          error\n        );\n      };\n\n      return new Promise(function(resolve, reject) {\n        chainGetBlock(blockService.getBlock(hash),\n          function (blockArray) {\n            resolve(blockArray);\n          },\n          function (error) {\n            reject();\n          }\n        );\n      });\n    };\n\n    /* Returns a promise for a response with the given hash. */\n    blockService.getBlock = function(hash) {\n      return new Promise (function (resolve, reject) {\n        $http.get('/blockExplorer/rawblock/' + hash).then(function(response) {\n          resolve(response.data);\n        },\n        function(error) {\n          reject();\n        });\n      });\n    };\n\n    blockService.getTransactions = function(hash, numLevels) {\n\n      var chainGetTransaction = function (parents, childGet, level, success, error) {\n        if (level === numLevels) {\n          success();\n          return;\n        }\n\n        childGet.then (function (rawTransactions) {\n          /* Build promises for all the children at this level of the tree. */\n          var childPromises = [];\n\n          rawTransactions.forEach(function (element, index) {\n\n            element.forEach(function (element) {\n\n              // Check for sentinal empty object indicating error obtaining transaction.\n              if (Object.getOwnPropertyNames(element).length === 0) return;\n\n              parents[index].children.push({ \"hash\" : element.hash, \"children\" : [] });\n\n              childPromises.push(blockService.getChildTransactions(element));\n\n            });\n          });\n\n\n          var children = [];\n\n          for (var x=0; x<parents.length; x++) {\n            var parent = parents[x];\n\n            if (!parent) {\n              continue;\n            }\n\n            children = children.concat(parent.children);\n          }\n\n          chainGetTransaction(children, Promise.all(childPromises), level + 1, success, error);\n        });\n      };\n\n      return new Promise(function(resolve, reject) {\n        blockService.getTransaction(hash)\n        .then (function (rawTransaction) {\n\n          var parent = [{ hash: rawTransaction.hash, \"children\" : [] }];\n\n          chainGetTransaction(parent, Promise.all([blockService.getChildTransactions(rawTransaction)]), 0, \n            function () {\n              resolve(parent);\n            }, \n            reject\n          );\n        });\n\n      });\n    };\n\n    /* Get all child transactions from a given raw transaction. */\n    blockService.getChildTransactions = function(rawTransaction) {\n      return new Promise (function (resolve, reject) {\n        var transactionPromises = [];\n\n        for (var x=0; x<rawTransaction.in.length; x++) {\n          var childHash = rawTransaction.in[x].prev_out.hash;\n          transactionPromises.push(blockService.getTransaction(childHash));\n        }\n\n        Promise.all(transactionPromises)\n        .then(function (response) {\n          resolve(response);\n        });\n      });\n    };\n\n    blockService.getTransaction = function(hash) {\n      return new Promise (function (resolve, reject) {\n        $http.get('/blockExplorer/rawtx/' + hash).then(function(response) {\n          resolve(response.data); \n        },\n        function (error) {\n          resolve({}); // Send an empty object back as a flag - we don't want to cause all of our child promises to fail.\n        });\n      });\n    };\n\n    blockService.verifyBlock = function (rawBlock) {\n      return new Promise (function (resolve, reject) {\n        var req = {\n          method: 'POST',\n          url: '/service/verifyBlock/',\n          data: rawBlock\n        }\n\n        $http(req).then(function(response) {\n          resolve(response.data); \n        },\n        function (error) {\n          reject(error);\n        });\n      });\n    }\n\n    return blockService;\n\n  }]);\n\n})();\n","(function($window) {\n  'use strict';\n  var blockDetailPage = angular.module('myApp.blockDetailPage', ['ngRoute', 'blockExplorerServices']);\n\n  blockDetailPage.config(['$routeProvider', function($routeProvider) {\n    $routeProvider.when('/Block/:blockHash', {\n      templateUrl: 'blockDetail/blockDetail.html',\n      controller: 'BlockDetailPageCtrl',\n    });\n  }]);\n\n  blockDetailPage.controller('BlockDetailPageCtrl', ['$scope', '$routeParams', 'BlockService', function($scope, $routeParams, BlockService) {\n    var self = this;\n\n    self.verificationStatus = 'Unverified';\n\n    this.verifyBlock = function () {\n      if (self.block == undefined) {\n        return;\n      }\n\n      BlockService.verifyBlock(self.block).then (function (isValid) {\n        $scope.$apply(function() {\n\n          if (isValid === 'true') {\n            self.verificationStatus = 'Valid';\n          }\n          else {\n            self.verificationStatus = 'Invalid';\n          }\n        });\n      },\n      function (error) {\n        console.log('error');\n        console.log(error);\n        self.verificationStatus = 'Unverified';\n      });\n    };\n\n\n    BlockService.getBlock($routeParams.blockHash).then(function(block) {\n      $scope.$apply(function() {\n        self.block = block;\n        self.verificationStatus = 'Unverified';\n      });\n    }).then(function() {    \n      $scope.$apply(function() {\n        self.rootHash = self.block.tx[0].hash;\n      });  \n    });\n  }]);\n\n  blockDetailPage.directive('transactionBrowser', function() {\n    return {\n      templateUrl: 'blockDetail/transactionBrowser.html',\n      restrict: 'E',\n      scope: {\n        transactions: '=transactions',\n        visualisationHash: '=visualisationHash'\n      },\n      controller: 'TrransactionBrowserController',\n      controllerAs: 'controller',\n    };\n  });\n\n  blockDetailPage.controller('TrransactionBrowserController', ['$scope', function($scope) {\n    var vm = this;\n\n    $scope.updateHash = function (newHash) {\n      $scope.visualisationHash = newHash;\n    };\n\n    $scope.$watch(function() {\n        return $scope.transactions;\n      }, function() {\n\n        if (!$scope.transactions) {\n          return;\n        }\n\n        vm.transactions = $scope.transactions;\n\n        if (vm.transactions.length === 0) {\n         return;\n        }\n\n        vm.currentIndex = 0;\n        vm.currentTransactionsFromIndex(vm.currentIndex, 10);\n      });\n\n      vm.currentTransactionsFromIndex = function (index, number) {\n        vm.currentTransactions = vm.transactions.slice(index, index+number);\n      };\n\n      vm.previousTen = function () {\n        if (vm.currentIndex < 10) {\n          return;\n        }\n\n        vm.currentIndex -= 10;\n\n        vm.currentTransactionsFromIndex(vm.currentIndex, 10);\n      };\n\n      vm.nextTen = function () {\n        if (vm.currentIndex > vm.transactions.length-10) {\n          return;\n        }\n\n        vm.currentIndex += 10;\n\n        vm.currentTransactionsFromIndex(vm.currentIndex, 10);\n      };\n\n      vm.remainingTransactions = function() {\n        if (!vm.transactions) {\n          return;\n        }\n\n        return Math.min(vm.transactions.length, vm.currentIndex + 10);\n      };\n  }]);\n\n  blockDetailPage.directive('visualisation', ['d3Service', 'BlockService', function(d3Service, BlockService) {\n    return {\n      restrict: 'EA',\n      scope: {\n        rootHash: \"=rootHash\",\n      },\n      link: function(scope, element, attrs) {\n\n        var nodes = [], links = [], svg, force, height = 480, width = 640;\n\n        d3Service.then(function(d3) {\n\n          force = d3.layout.force();\n          force.nodes(nodes);\n          force.links(links);\n\n          svg = d3.select('svg')\n              .attr('width', width)\n              .attr('height', height)\n              .style('background-color', 'transparent')\n              .style('overflow', 'visible');\n\n              svg.append(\"g\").attr(\"class\", \"tx-links\");\n              svg.append(\"g\").attr(\"class\", \"tx-nodes\");\n        });\n\n        var update = function () {\n          if (!svg || !force) return;\n\n          d3.selectAll(\"svg g.tx-nodes g\").remove();\n          d3.selectAll(\"svg g.tx-links line\").remove();\n\n          var link = svg.selectAll('g.tx-links').selectAll('.link').data(links);\n\n          link.enter().append('line')\n            .attr('class', 'link');\n\n          link.exit().remove();\n\n          var node = svg.selectAll('g.tx-nodes').selectAll('.node-group').data(nodes);\n            \n          // Enter selection.\n          var groupEnter = node.enter().append('g');\n\n          groupEnter\n            .attr('class', 'node-group')\n            .attr(\"tx-hash\", function(d) { return d.hash; })\n            .on('click', function (d) {\n              scope.$apply(function() {\n                scope.rootHash = d.hash; \n              });\n            });\n\n          groupEnter\n             .append('circle')\n             .attr('r', 20)\n             .attr('class', 'node');\n\n          groupEnter\n             .append('text')\n             .style(\"text-anchor\", \"middle\")\n             .attr(\"fill\", \"white\");\n\n            svg.selectAll('svg text').text(function (d) { \n              return d.hash.slice(0, 3); \n            });\n\n          // Exit selection.\n          node.exit().remove();\n\n\n          \n          \n          force.on('tick', function() {\n\n              node.attr('transform', function(d) { return \"translate(\" + d.x + \", \" + d.y + \")\"; });\n\n              link.attr('x1', function(d) { return d.source.x; })\n                  .attr('y1', function(d) { return d.source.y; })\n                  .attr('x2', function(d) { return d.target.x; })\n                  .attr('y2', function(d) { return d.target.y; });\n\n          });\n\n          force\n          .size([width, height])\n          .nodes(nodes)\n          .links(links)\n          .linkDistance(function(d) {\n            return 15 / (1/d.layer);\n          })\n          .charge(-1800)\n          .chargeDistance(140)\n          .alpha(2);\n\n          force.start();\n        };\n\n        scope.$watch(function() {\n          return scope.rootHash;\n        }, function() {\n\n          if (scope.rootHash === undefined) return;\n\n          BlockService.getTransactions(scope.rootHash, 3)\n          .then(function (result) {\n\n            var dataFromTree = function () {\n              var index = 0;\n\n              return function (parent, layer) {\n                parent.uid = index;\n                nodes.push(parent);\n\n                if (parent.children.length === 0) {\n                  return;\n                }\n\n                parent.children.forEach(function(element) {\n                  index++;\n\n                  links.push({  source : parent,\n                                target : element,\n                                layer : layer});\n\n                  dataFromTree(element, layer+1);\n                });\n              };\n            }();\n\n            \n\n            nodes.length = 0;\n            links.length = 0;\n            dataFromTree(result[0], 0);\n\n            nodes.slice().splice(0, 1).forEach(function (element, index) {\n              if (index === 0) {\n                element.fixed = true;\n                element.x = width/2;\n                element.y = height/2;\n              } else {\n                element.y = 0;\n                element.x = 0;  \n              }\n            });\n\n            update();\n\n          });\n\n        });\n      },\n    };\n  }]);\n\n})(this);  \n","'use strict';\n\n(function() {\n\tangular.module('d3', [])\n\t\t.factory('d3Service', ['$document', '$q', '$rootScope', function($document, $q, $rootScope) {\n\t\t\t\n\t\t\treturn new Promise (function (resolve, reject) {\n        \t\tfunction onScriptLoad() {\n\t\t\t\t\t// Load client in the browser\n\t        \t\t$rootScope.$apply(function() { resolve(window.d3); });\n\t      \t\t}\n\t\t\t    // Create a script tag with d3 as the source\n\t\t\t    // and call our onScriptLoad callback when it\n\t\t\t    // has been loaded\n\t\t\t    var scriptTag = $document[0].createElement('script');\n\t\t\t    scriptTag.type = 'text/javascript'; \n\t\t\t    scriptTag.async = true;\n\t\t\t    scriptTag.src = 'http://d3js.org/d3.v3.min.js';\n\t\t\t    scriptTag.onreadystatechange = function () {\n\t\t\t   \t\tif (this.readyState == 'complete') onScriptLoad();\n\t\t\t    };\n\t\t\t    scriptTag.onload = onScriptLoad;\n\n\t\t\t    var s = $document[0].getElementsByTagName('body')[0];\n\t\t\t    s.appendChild(scriptTag);\n\t\t    });\n\n\t\t\t\n\t\t}]);\n})();","'use strict';\n\nangular.module('myApp.version', [\n  'myApp.version.interpolate-filter',\n  'myApp.version.version-directive'\n])\n\n.value('version', '0.1');\n","'use strict';\n\nangular.module('myApp.version.version-directive', [])\n\n.directive('appVersion', ['version', function(version) {\n  return function(scope, elm, attrs) {\n    elm.text(version);\n  };\n}]);\n","'use strict';\n\nangular.module('myApp.version.interpolate-filter', [])\n\n.filter('interpolate', ['version', function(version) {\n  return function(text) {\n    return String(text).replace(/\\%VERSION\\%/mg, version);\n  };\n}]);\n","/**\n * @license AngularJS v1.2.28\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngRoute\n * @description\n *\n * # ngRoute\n *\n * The `ngRoute` module provides routing and deeplinking services and directives for angular apps.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n *\n * <div doc-module-components=\"ngRoute\"></div>\n */\n /* global -ngRouteModule */\nvar ngRouteModule = angular.module('ngRoute', ['ng']).\n                        provider('$route', $RouteProvider);\n\n/**\n * @ngdoc provider\n * @name $routeProvider\n * @kind function\n *\n * @description\n *\n * Used for configuring routes.\n *\n * ## Example\n * See {@link ngRoute.$route#example $route} for an example of configuring and using `ngRoute`.\n *\n * ## Dependencies\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n */\nfunction $RouteProvider(){\n  function inherit(parent, extra) {\n    return angular.extend(new (angular.extend(function() {}, {prototype:parent}))(), extra);\n  }\n\n  var routes = {};\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#when\n   *\n   * @param {string} path Route path (matched against `$location.path`). If `$location.path`\n   *    contains redundant trailing slash or is missing one, the route will still match and the\n   *    `$location.path` will be updated to add or drop the trailing slash to exactly match the\n   *    route definition.\n   *\n   *    * `path` can contain named groups starting with a colon: e.g. `:name`. All characters up\n   *        to the next slash are matched and stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain named groups starting with a colon and ending with a star:\n   *        e.g.`:name*`. All characters are eagerly stored in `$routeParams` under the given `name`\n   *        when the route matches.\n   *    * `path` can contain optional named groups with a question mark: e.g.`:name?`.\n   *\n   *    For example, routes like `/color/:color/largecode/:largecode*\\/edit` will match\n   *    `/color/brown/largecode/code/with/slashes/edit` and extract:\n   *\n   *    * `color: brown`\n   *    * `largecode: code/with/slashes`.\n   *\n   *\n   * @param {Object} route Mapping information to be assigned to `$route.current` on route\n   *    match.\n   *\n   *    Object properties:\n   *\n   *    - `controller` – `{(string|function()=}` – Controller fn that should be associated with\n   *      newly created scope or the name of a {@link angular.Module#controller registered\n   *      controller} if passed as a string.\n   *    - `controllerAs` – `{string=}` – A controller alias name. If present the controller will be\n   *      published to scope under the `controllerAs` name.\n   *    - `template` – `{string=|function()=}` – html template as a string or a function that\n   *      returns an html template as a string which should be used by {@link\n   *      ngRoute.directive:ngView ngView} or {@link ng.directive:ngInclude ngInclude} directives.\n   *      This property takes precedence over `templateUrl`.\n   *\n   *      If `template` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `templateUrl` – `{string=|function()=}` – path or function that returns a path to an html\n   *      template that should be used by {@link ngRoute.directive:ngView ngView}.\n   *\n   *      If `templateUrl` is a function, it will be called with the following parameters:\n   *\n   *      - `{Array.<Object>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route\n   *\n   *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n   *      be injected into the controller. If any of these dependencies are promises, the router\n   *      will wait for them all to be resolved or one to be rejected before the controller is\n   *      instantiated.\n   *      If all the promises are resolved successfully, the values of the resolved promises are\n   *      injected and {@link ngRoute.$route#$routeChangeSuccess $routeChangeSuccess} event is\n   *      fired. If any of the promises are rejected the\n   *      {@link ngRoute.$route#$routeChangeError $routeChangeError} event is fired. The map object\n   *      is:\n   *\n   *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\n   *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\n   *        Otherwise if function, then it is {@link auto.$injector#invoke injected}\n   *        and the return value is treated as the dependency. If the result is a promise, it is\n   *        resolved before its value is injected into the controller. Be aware that\n   *        `ngRoute.$routeParams` will still refer to the previous route within these resolve\n   *        functions.  Use `$route.current.params` to access the new route parameters, instead.\n   *\n   *    - `redirectTo` – {(string|function())=} – value to update\n   *      {@link ng.$location $location} path with and trigger route redirection.\n   *\n   *      If `redirectTo` is a function, it will be called with the following parameters:\n   *\n   *      - `{Object.<string>}` - route parameters extracted from the current\n   *        `$location.path()` by applying the current route templateUrl.\n   *      - `{string}` - current `$location.path()`\n   *      - `{Object}` - current `$location.search()`\n   *\n   *      The custom `redirectTo` function is expected to return a string which will be used\n   *      to update `$location.path()` and `$location.search()`.\n   *\n   *    - `[reloadOnSearch=true]` - {boolean=} - reload route when only `$location.search()`\n   *      or `$location.hash()` changes.\n   *\n   *      If the option is set to `false` and url in the browser changes, then\n   *      `$routeUpdate` event is broadcasted on the root scope.\n   *\n   *    - `[caseInsensitiveMatch=false]` - {boolean=} - match routes without being case sensitive\n   *\n   *      If the option is set to `true`, then the particular route can be matched without being\n   *      case sensitive\n   *\n   * @returns {Object} self\n   *\n   * @description\n   * Adds a new route definition to the `$route` service.\n   */\n  this.when = function(path, route) {\n    routes[path] = angular.extend(\n      {reloadOnSearch: true},\n      route,\n      path && pathRegExp(path, route)\n    );\n\n    // create redirection for trailing slashes\n    if (path) {\n      var redirectPath = (path[path.length-1] == '/')\n            ? path.substr(0, path.length-1)\n            : path +'/';\n\n      routes[redirectPath] = angular.extend(\n        {redirectTo: path},\n        pathRegExp(redirectPath, route)\n      );\n    }\n\n    return this;\n  };\n\n   /**\n    * @param path {string} path\n    * @param opts {Object} options\n    * @return {?Object}\n    *\n    * @description\n    * Normalizes the given path, returning a regular expression\n    * and the original path.\n    *\n    * Inspired by pathRexp in visionmedia/express/lib/utils.js.\n    */\n  function pathRegExp(path, opts) {\n    var insensitive = opts.caseInsensitiveMatch,\n        ret = {\n          originalPath: path,\n          regexp: path\n        },\n        keys = ret.keys = [];\n\n    path = path\n      .replace(/([().])/g, '\\\\$1')\n      .replace(/(\\/)?:(\\w+)([\\?\\*])?/g, function(_, slash, key, option){\n        var optional = option === '?' ? option : null;\n        var star = option === '*' ? option : null;\n        keys.push({ name: key, optional: !!optional });\n        slash = slash || '';\n        return ''\n          + (optional ? '' : slash)\n          + '(?:'\n          + (optional ? slash : '')\n          + (star && '(.+?)' || '([^/]+)')\n          + (optional || '')\n          + ')'\n          + (optional || '');\n      })\n      .replace(/([\\/$\\*])/g, '\\\\$1');\n\n    ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');\n    return ret;\n  }\n\n  /**\n   * @ngdoc method\n   * @name $routeProvider#otherwise\n   *\n   * @description\n   * Sets route definition that will be used on route change when no other route definition\n   * is matched.\n   *\n   * @param {Object} params Mapping information to be assigned to `$route.current`.\n   * @returns {Object} self\n   */\n  this.otherwise = function(params) {\n    this.when(null, params);\n    return this;\n  };\n\n\n  this.$get = ['$rootScope',\n               '$location',\n               '$routeParams',\n               '$q',\n               '$injector',\n               '$http',\n               '$templateCache',\n               '$sce',\n      function($rootScope, $location, $routeParams, $q, $injector, $http, $templateCache, $sce) {\n\n    /**\n     * @ngdoc service\n     * @name $route\n     * @requires $location\n     * @requires $routeParams\n     *\n     * @property {Object} current Reference to the current route definition.\n     * The route definition contains:\n     *\n     *   - `controller`: The controller constructor as define in route definition.\n     *   - `locals`: A map of locals which is used by {@link ng.$controller $controller} service for\n     *     controller instantiation. The `locals` contain\n     *     the resolved values of the `resolve` map. Additionally the `locals` also contain:\n     *\n     *     - `$scope` - The current route scope.\n     *     - `$template` - The current route template HTML.\n     *\n     * @property {Object} routes Object with all route configuration Objects as its properties.\n     *\n     * @description\n     * `$route` is used for deep-linking URLs to controllers and views (HTML partials).\n     * It watches `$location.url()` and tries to map the path to an existing route definition.\n     *\n     * Requires the {@link ngRoute `ngRoute`} module to be installed.\n     *\n     * You can define routes through {@link ngRoute.$routeProvider $routeProvider}'s API.\n     *\n     * The `$route` service is typically used in conjunction with the\n     * {@link ngRoute.directive:ngView `ngView`} directive and the\n     * {@link ngRoute.$routeParams `$routeParams`} service.\n     *\n     * @example\n     * This example shows how changing the URL hash causes the `$route` to match a route against the\n     * URL, and the `ngView` pulls in the partial.\n     *\n     * <example name=\"$route-service\" module=\"ngRouteExample\"\n     *          deps=\"angular-route.js\" fixBase=\"true\">\n     *   <file name=\"index.html\">\n     *     <div ng-controller=\"MainController\">\n     *       Choose:\n     *       <a href=\"Book/Moby\">Moby</a> |\n     *       <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n     *       <a href=\"Book/Gatsby\">Gatsby</a> |\n     *       <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n     *       <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n     *\n     *       <div ng-view></div>\n     *\n     *       <hr />\n     *\n     *       <pre>$location.path() = {{$location.path()}}</pre>\n     *       <pre>$route.current.templateUrl = {{$route.current.templateUrl}}</pre>\n     *       <pre>$route.current.params = {{$route.current.params}}</pre>\n     *       <pre>$route.current.scope.name = {{$route.current.scope.name}}</pre>\n     *       <pre>$routeParams = {{$routeParams}}</pre>\n     *     </div>\n     *   </file>\n     *\n     *   <file name=\"book.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *   </file>\n     *\n     *   <file name=\"chapter.html\">\n     *     controller: {{name}}<br />\n     *     Book Id: {{params.bookId}}<br />\n     *     Chapter Id: {{params.chapterId}}\n     *   </file>\n     *\n     *   <file name=\"script.js\">\n     *     angular.module('ngRouteExample', ['ngRoute'])\n     *\n     *      .controller('MainController', function($scope, $route, $routeParams, $location) {\n     *          $scope.$route = $route;\n     *          $scope.$location = $location;\n     *          $scope.$routeParams = $routeParams;\n     *      })\n     *\n     *      .controller('BookController', function($scope, $routeParams) {\n     *          $scope.name = \"BookController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *      .controller('ChapterController', function($scope, $routeParams) {\n     *          $scope.name = \"ChapterController\";\n     *          $scope.params = $routeParams;\n     *      })\n     *\n     *     .config(function($routeProvider, $locationProvider) {\n     *       $routeProvider\n     *        .when('/Book/:bookId', {\n     *         templateUrl: 'book.html',\n     *         controller: 'BookController',\n     *         resolve: {\n     *           // I will cause a 1 second delay\n     *           delay: function($q, $timeout) {\n     *             var delay = $q.defer();\n     *             $timeout(delay.resolve, 1000);\n     *             return delay.promise;\n     *           }\n     *         }\n     *       })\n     *       .when('/Book/:bookId/ch/:chapterId', {\n     *         templateUrl: 'chapter.html',\n     *         controller: 'ChapterController'\n     *       });\n     *\n     *       // configure html5 to get links working on jsfiddle\n     *       $locationProvider.html5Mode(true);\n     *     });\n     *\n     *   </file>\n     *\n     *   <file name=\"protractor.js\" type=\"protractor\">\n     *     it('should load and compile correct template', function() {\n     *       element(by.linkText('Moby: Ch1')).click();\n     *       var content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: ChapterController/);\n     *       expect(content).toMatch(/Book Id\\: Moby/);\n     *       expect(content).toMatch(/Chapter Id\\: 1/);\n     *\n     *       element(by.partialLinkText('Scarlet')).click();\n     *\n     *       content = element(by.css('[ng-view]')).getText();\n     *       expect(content).toMatch(/controller\\: BookController/);\n     *       expect(content).toMatch(/Book Id\\: Scarlet/);\n     *     });\n     *   </file>\n     * </example>\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeStart\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted before a route change. At this  point the route services starts\n     * resolving all of the dependencies needed for the route change to occur.\n     * Typically this involves fetching the view template as well as any dependencies\n     * defined in `resolve` route property. Once  all of the dependencies are resolved\n     * `$routeChangeSuccess` is fired.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} next Future route information.\n     * @param {Route} current Current route information.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeSuccess\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted after a route dependencies are resolved.\n     * {@link ngRoute.directive:ngView ngView} listens for the directive\n     * to instantiate the controller and render the view.\n     *\n     * @param {Object} angularEvent Synthetic event object.\n     * @param {Route} current Current route information.\n     * @param {Route|Undefined} previous Previous route information, or undefined if current is\n     * first route entered.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeChangeError\n     * @eventType broadcast on root scope\n     * @description\n     * Broadcasted if any of the resolve promises are rejected.\n     *\n     * @param {Object} angularEvent Synthetic event object\n     * @param {Route} current Current route information.\n     * @param {Route} previous Previous route information.\n     * @param {Route} rejection Rejection of the promise. Usually the error of the failed promise.\n     */\n\n    /**\n     * @ngdoc event\n     * @name $route#$routeUpdate\n     * @eventType broadcast on root scope\n     * @description\n     *\n     * The `reloadOnSearch` property has been set to false, and we are reusing the same\n     * instance of the Controller.\n     */\n\n    var forceReload = false,\n        $route = {\n          routes: routes,\n\n          /**\n           * @ngdoc method\n           * @name $route#reload\n           *\n           * @description\n           * Causes `$route` service to reload the current route even if\n           * {@link ng.$location $location} hasn't changed.\n           *\n           * As a result of that, {@link ngRoute.directive:ngView ngView}\n           * creates new scope, reinstantiates the controller.\n           */\n          reload: function() {\n            forceReload = true;\n            $rootScope.$evalAsync(updateRoute);\n          }\n        };\n\n    $rootScope.$on('$locationChangeSuccess', updateRoute);\n\n    return $route;\n\n    /////////////////////////////////////////////////////\n\n    /**\n     * @param on {string} current url\n     * @param route {Object} route regexp to match the url against\n     * @return {?Object}\n     *\n     * @description\n     * Check if the route matches the current url.\n     *\n     * Inspired by match in\n     * visionmedia/express/lib/router/router.js.\n     */\n    function switchRouteMatcher(on, route) {\n      var keys = route.keys,\n          params = {};\n\n      if (!route.regexp) return null;\n\n      var m = route.regexp.exec(on);\n      if (!m) return null;\n\n      for (var i = 1, len = m.length; i < len; ++i) {\n        var key = keys[i - 1];\n\n        var val = m[i];\n\n        if (key && val) {\n          params[key.name] = val;\n        }\n      }\n      return params;\n    }\n\n    function updateRoute() {\n      var next = parseRoute(),\n          last = $route.current;\n\n      if (next && last && next.$$route === last.$$route\n          && angular.equals(next.pathParams, last.pathParams)\n          && !next.reloadOnSearch && !forceReload) {\n        last.params = next.params;\n        angular.copy(last.params, $routeParams);\n        $rootScope.$broadcast('$routeUpdate', last);\n      } else if (next || last) {\n        forceReload = false;\n        $rootScope.$broadcast('$routeChangeStart', next, last);\n        $route.current = next;\n        if (next) {\n          if (next.redirectTo) {\n            if (angular.isString(next.redirectTo)) {\n              $location.path(interpolate(next.redirectTo, next.params)).search(next.params)\n                       .replace();\n            } else {\n              $location.url(next.redirectTo(next.pathParams, $location.path(), $location.search()))\n                       .replace();\n            }\n          }\n        }\n\n        $q.when(next).\n          then(function() {\n            if (next) {\n              var locals = angular.extend({}, next.resolve),\n                  template, templateUrl;\n\n              angular.forEach(locals, function(value, key) {\n                locals[key] = angular.isString(value) ?\n                    $injector.get(value) : $injector.invoke(value);\n              });\n\n              if (angular.isDefined(template = next.template)) {\n                if (angular.isFunction(template)) {\n                  template = template(next.params);\n                }\n              } else if (angular.isDefined(templateUrl = next.templateUrl)) {\n                if (angular.isFunction(templateUrl)) {\n                  templateUrl = templateUrl(next.params);\n                }\n                templateUrl = $sce.getTrustedResourceUrl(templateUrl);\n                if (angular.isDefined(templateUrl)) {\n                  next.loadedTemplateUrl = templateUrl;\n                  template = $http.get(templateUrl, {cache: $templateCache}).\n                      then(function(response) { return response.data; });\n                }\n              }\n              if (angular.isDefined(template)) {\n                locals['$template'] = template;\n              }\n              return $q.all(locals);\n            }\n          }).\n          // after route change\n          then(function(locals) {\n            if (next == $route.current) {\n              if (next) {\n                next.locals = locals;\n                angular.copy(next.params, $routeParams);\n              }\n              $rootScope.$broadcast('$routeChangeSuccess', next, last);\n            }\n          }, function(error) {\n            if (next == $route.current) {\n              $rootScope.$broadcast('$routeChangeError', next, last, error);\n            }\n          });\n      }\n    }\n\n\n    /**\n     * @returns {Object} the current active route, by matching it against the URL\n     */\n    function parseRoute() {\n      // Match a route\n      var params, match;\n      angular.forEach(routes, function(route, path) {\n        if (!match && (params = switchRouteMatcher($location.path(), route))) {\n          match = inherit(route, {\n            params: angular.extend({}, $location.search(), params),\n            pathParams: params});\n          match.$$route = route;\n        }\n      });\n      // No route matched; fallback to \"otherwise\" route\n      return match || routes[null] && inherit(routes[null], {params: {}, pathParams:{}});\n    }\n\n    /**\n     * @returns {string} interpolation of the redirect path with the parameters\n     */\n    function interpolate(string, params) {\n      var result = [];\n      angular.forEach((string||'').split(':'), function(segment, i) {\n        if (i === 0) {\n          result.push(segment);\n        } else {\n          var segmentMatch = segment.match(/(\\w+)(?:[?*])?(.*)/);\n          var key = segmentMatch[1];\n          result.push(params[key]);\n          result.push(segmentMatch[2] || '');\n          delete params[key];\n        }\n      });\n      return result.join('');\n    }\n  }];\n}\n\nngRouteModule.provider('$routeParams', $RouteParamsProvider);\n\n\n/**\n * @ngdoc service\n * @name $routeParams\n * @requires $route\n *\n * @description\n * The `$routeParams` service allows you to retrieve the current set of route parameters.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * The route parameters are a combination of {@link ng.$location `$location`}'s\n * {@link ng.$location#search `search()`} and {@link ng.$location#path `path()`}.\n * The `path` parameters are extracted when the {@link ngRoute.$route `$route`} path is matched.\n *\n * In case of parameter name collision, `path` params take precedence over `search` params.\n *\n * The service guarantees that the identity of the `$routeParams` object will remain unchanged\n * (but its properties will likely change) even when a route change occurs.\n *\n * Note that the `$routeParams` are only updated *after* a route change completes successfully.\n * This means that you cannot rely on `$routeParams` being correct in route resolve functions.\n * Instead you can use `$route.current.params` to access the new route's parameters.\n *\n * @example\n * ```js\n *  // Given:\n *  // URL: http://server.com/index.html#/Chapter/1/Section/2?search=moby\n *  // Route: /Chapter/:chapterId/Section/:sectionId\n *  //\n *  // Then\n *  $routeParams ==> {chapterId:'1', sectionId:'2', search:'moby'}\n * ```\n */\nfunction $RouteParamsProvider() {\n  this.$get = function() { return {}; };\n}\n\nngRouteModule.directive('ngView', ngViewFactory);\nngRouteModule.directive('ngView', ngViewFillContentFactory);\n\n\n/**\n * @ngdoc directive\n * @name ngView\n * @restrict ECA\n *\n * @description\n * # Overview\n * `ngView` is a directive that complements the {@link ngRoute.$route $route} service by\n * including the rendered template of the current route into the main layout (`index.html`) file.\n * Every time the current route changes, the included view changes with it according to the\n * configuration of the `$route` service.\n *\n * Requires the {@link ngRoute `ngRoute`} module to be installed.\n *\n * @animations\n * enter - animation is used to bring new content into the browser.\n * leave - animation is used to animate existing content away.\n *\n * The enter and leave animation occur concurrently.\n *\n * @scope\n * @priority 400\n * @param {string=} onload Expression to evaluate whenever the view updates.\n *\n * @param {string=} autoscroll Whether `ngView` should call {@link ng.$anchorScroll\n *                  $anchorScroll} to scroll the viewport after the view is updated.\n *\n *                  - If the attribute is not set, disable scrolling.\n *                  - If the attribute is set without value, enable scrolling.\n *                  - Otherwise enable scrolling only if the `autoscroll` attribute value evaluated\n *                    as an expression yields a truthy value.\n * @example\n    <example name=\"ngView-directive\" module=\"ngViewExample\"\n             deps=\"angular-route.js;angular-animate.js\"\n             animations=\"true\" fixBase=\"true\">\n      <file name=\"index.html\">\n        <div ng-controller=\"MainCtrl as main\">\n          Choose:\n          <a href=\"Book/Moby\">Moby</a> |\n          <a href=\"Book/Moby/ch/1\">Moby: Ch1</a> |\n          <a href=\"Book/Gatsby\">Gatsby</a> |\n          <a href=\"Book/Gatsby/ch/4?key=value\">Gatsby: Ch4</a> |\n          <a href=\"Book/Scarlet\">Scarlet Letter</a><br/>\n\n          <div class=\"view-animate-container\">\n            <div ng-view class=\"view-animate\"></div>\n          </div>\n          <hr />\n\n          <pre>$location.path() = {{main.$location.path()}}</pre>\n          <pre>$route.current.templateUrl = {{main.$route.current.templateUrl}}</pre>\n          <pre>$route.current.params = {{main.$route.current.params}}</pre>\n          <pre>$route.current.scope.name = {{main.$route.current.scope.name}}</pre>\n          <pre>$routeParams = {{main.$routeParams}}</pre>\n        </div>\n      </file>\n\n      <file name=\"book.html\">\n        <div>\n          controller: {{book.name}}<br />\n          Book Id: {{book.params.bookId}}<br />\n        </div>\n      </file>\n\n      <file name=\"chapter.html\">\n        <div>\n          controller: {{chapter.name}}<br />\n          Book Id: {{chapter.params.bookId}}<br />\n          Chapter Id: {{chapter.params.chapterId}}\n        </div>\n      </file>\n\n      <file name=\"animations.css\">\n        .view-animate-container {\n          position:relative;\n          height:100px!important;\n          position:relative;\n          background:white;\n          border:1px solid black;\n          height:40px;\n          overflow:hidden;\n        }\n\n        .view-animate {\n          padding:10px;\n        }\n\n        .view-animate.ng-enter, .view-animate.ng-leave {\n          -webkit-transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n          transition:all cubic-bezier(0.250, 0.460, 0.450, 0.940) 1.5s;\n\n          display:block;\n          width:100%;\n          border-left:1px solid black;\n\n          position:absolute;\n          top:0;\n          left:0;\n          right:0;\n          bottom:0;\n          padding:10px;\n        }\n\n        .view-animate.ng-enter {\n          left:100%;\n        }\n        .view-animate.ng-enter.ng-enter-active {\n          left:0;\n        }\n        .view-animate.ng-leave.ng-leave-active {\n          left:-100%;\n        }\n      </file>\n\n      <file name=\"script.js\">\n        angular.module('ngViewExample', ['ngRoute', 'ngAnimate'])\n          .config(['$routeProvider', '$locationProvider',\n            function($routeProvider, $locationProvider) {\n              $routeProvider\n                .when('/Book/:bookId', {\n                  templateUrl: 'book.html',\n                  controller: 'BookCtrl',\n                  controllerAs: 'book'\n                })\n                .when('/Book/:bookId/ch/:chapterId', {\n                  templateUrl: 'chapter.html',\n                  controller: 'ChapterCtrl',\n                  controllerAs: 'chapter'\n                });\n\n              $locationProvider.html5Mode(true);\n          }])\n          .controller('MainCtrl', ['$route', '$routeParams', '$location',\n            function($route, $routeParams, $location) {\n              this.$route = $route;\n              this.$location = $location;\n              this.$routeParams = $routeParams;\n          }])\n          .controller('BookCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"BookCtrl\";\n            this.params = $routeParams;\n          }])\n          .controller('ChapterCtrl', ['$routeParams', function($routeParams) {\n            this.name = \"ChapterCtrl\";\n            this.params = $routeParams;\n          }]);\n\n      </file>\n\n      <file name=\"protractor.js\" type=\"protractor\">\n        it('should load and compile correct template', function() {\n          element(by.linkText('Moby: Ch1')).click();\n          var content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: ChapterCtrl/);\n          expect(content).toMatch(/Book Id\\: Moby/);\n          expect(content).toMatch(/Chapter Id\\: 1/);\n\n          element(by.partialLinkText('Scarlet')).click();\n\n          content = element(by.css('[ng-view]')).getText();\n          expect(content).toMatch(/controller\\: BookCtrl/);\n          expect(content).toMatch(/Book Id\\: Scarlet/);\n        });\n      </file>\n    </example>\n */\n\n\n/**\n * @ngdoc event\n * @name ngView#$viewContentLoaded\n * @eventType emit on the current ngView scope\n * @description\n * Emitted every time the ngView content is reloaded.\n */\nngViewFactory.$inject = ['$route', '$anchorScroll', '$animate'];\nfunction ngViewFactory(   $route,   $anchorScroll,   $animate) {\n  return {\n    restrict: 'ECA',\n    terminal: true,\n    priority: 400,\n    transclude: 'element',\n    link: function(scope, $element, attr, ctrl, $transclude) {\n        var currentScope,\n            currentElement,\n            previousElement,\n            autoScrollExp = attr.autoscroll,\n            onloadExp = attr.onload || '';\n\n        scope.$on('$routeChangeSuccess', update);\n        update();\n\n        function cleanupLastView() {\n          if(previousElement) {\n            previousElement.remove();\n            previousElement = null;\n          }\n          if(currentScope) {\n            currentScope.$destroy();\n            currentScope = null;\n          }\n          if(currentElement) {\n            $animate.leave(currentElement, function() {\n              previousElement = null;\n            });\n            previousElement = currentElement;\n            currentElement = null;\n          }\n        }\n\n        function update() {\n          var locals = $route.current && $route.current.locals,\n              template = locals && locals.$template;\n\n          if (angular.isDefined(template)) {\n            var newScope = scope.$new();\n            var current = $route.current;\n\n            // Note: This will also link all children of ng-view that were contained in the original\n            // html. If that content contains controllers, ... they could pollute/change the scope.\n            // However, using ng-view on an element with additional content does not make sense...\n            // Note: We can't remove them in the cloneAttchFn of $transclude as that\n            // function is called before linking the content, which would apply child\n            // directives to non existing elements.\n            var clone = $transclude(newScope, function(clone) {\n              $animate.enter(clone, null, currentElement || $element, function onNgViewEnter () {\n                if (angular.isDefined(autoScrollExp)\n                  && (!autoScrollExp || scope.$eval(autoScrollExp))) {\n                  $anchorScroll();\n                }\n              });\n              cleanupLastView();\n            });\n\n            currentElement = clone;\n            currentScope = current.scope = newScope;\n            currentScope.$emit('$viewContentLoaded');\n            currentScope.$eval(onloadExp);\n          } else {\n            cleanupLastView();\n          }\n        }\n    }\n  };\n}\n\n// This directive is called during the $transclude call of the first `ngView` directive.\n// It will replace and compile the content of the element with the loaded template.\n// We need this directive so that the element content is already filled when\n// the link function of another directive on the same element as ngView\n// is called.\nngViewFillContentFactory.$inject = ['$compile', '$controller', '$route'];\nfunction ngViewFillContentFactory($compile, $controller, $route) {\n  return {\n    restrict: 'ECA',\n    priority: -400,\n    link: function(scope, $element) {\n      var current = $route.current,\n          locals = current.locals;\n\n      $element.html(locals.$template);\n\n      var link = $compile($element.contents());\n\n      if (current.controller) {\n        locals.$scope = scope;\n        var controller = $controller(current.controller, locals);\n        if (current.controllerAs) {\n          scope[current.controllerAs] = controller;\n        }\n        $element.data('$ngControllerController', controller);\n        $element.children().data('$ngControllerController', controller);\n      }\n\n      link(scope);\n    }\n  };\n}\n\n\n})(window, window.angular);\n"]}